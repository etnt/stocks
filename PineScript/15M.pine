// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © kruskakli
//
// To be used on the 15M chart.
//
//@version=6
indicator("15M", overlay=true)

//
// VWMA
//
plotVWMA = input(defval=true, title="Plot VWMA", group="Intraday Moving Averages")
len = input.int(defval=21, title="VWMA Length", group="Intraday Moving Averages")
VWMA = ta.vwma(hlc3, len)

plot(series=plotVWMA ? VWMA : na,   linewidth=1, color=color.blue,   title="VWMA",    style=plot.style_line)

//
// A L E R T   C O N D I T I O N
//
// Define the crossing conditions
priceCrossAboveVWMA = close > VWMA and close[1] <= VWMA[1]
priceCrossBelowVWMA = close < VWMA and close[1] >= VWMA[1]

// Register the alerts
alertcondition(condition=priceCrossAboveVWMA, title="Price Cross Above VWMA", message="Price crossed above VWMA")
alertcondition(condition=priceCrossBelowVWMA, title="Price Cross Below VWMA", message="Price crossed below VWMA")

//
// Z E B R A   P A T T E R N
//

// User input
show_zebra = input.bool(defval=true, title="Show Zebra Pattern")

// Timeframe checks
isDaily = timeframe.period == "1D"
is15Min = timeframe.period == "15"

// Get time-based numbers
weekNumber = weekofyear(time)
dayNumber = dayofweek(time)

// For 15M chart, calculate which 15-minute period of the day it is
minutesSinceMidnight = hour * 60 + minute
period15Min = minutesSinceMidnight / 15

// Light gray color with 90% transparency
gee = color.new(#eeeeee, 90)

// Apply zebra pattern:
// - Weekly pattern on Daily chart (even/odd weeks)
// - Daily pattern on 15M chart using continuous counting across weeks
isEvenPeriod = ((weekNumber * 5 + dayNumber) % 2 == 0)  // Multiply week by 5 (trading days) and add day number

bgcolor(title="Zebra Pattern", color=(show_zebra and isEvenPeriod) ? gee : na)


//
// Candlestick patterns
//
plotCandlesticks = input(defval=true, title="Plot Candlestick Patterns", group="Candlestick Patterns")
plotEveningStar = input(defval=true, title="Plot Evening Star", group="Candlestick Patterns")
plotMorningStar = input(defval=true, title="Plot Morning Star", group="Candlestick Patterns")
plotShootingStar = input(defval=true, title="Plot Shooting Star", group="Candlestick Patterns")
plotHammer = input(defval=true, title="Plot Hammer", group="Candlestick Patterns")
plotInvertedHammer = input(defval=true, title="Plot Inverted Hammer", group="Candlestick Patterns")
plotGravestone = input(defval=true, title="Plot Gravestone", group="Candlestick Patterns")

// Candlestick Patterns
isEveningStar=(close[2] > open[2] and math.min(open[1], close[1]) > close[2] and open < math.min(open[1], close[1]) and close < open )

isMorningStar=(close[2] < open[2] and math.max(open[1], close[1]) < close[2] and open > math.max(open[1], close[1]) and close > open )

// The inverted hammer and the shooting star look exactly the same. 
// They both have long upper shadows and small real bodies near the low of the candle,
// with little or no lower shadow.
// The difference is context: A shooting star occurs after a price advance and marks a
// potential turning point lower. An inverted hammer occurs after a price decline and 
// marks a potential turning point higher.
//isShootingStar=(open[1] < close[1] and open > close[1] and high - math.max(open, close) >= math.abs(open - close) * 3 and math.min(close, open) - low <= math.abs(open - close))
isShootingStar=(open[1] < close[1] and ((high - low)>3*(open -close)) and  ((high - close)/(.001 + high - low) > 0.7) and ((high - open)/(.001 + high - low) > 0.7))
isInvertedHammer=open[1]>close[1] and (((high - low)>3*(open -close)) and  ((high - close)/(.001 + high - low) > 0.7) and ((high - open)/(.001 + high - low) > 0.6))

isHammer=((open[1]>close) and (low<low[1]) and ((high - low)>3*(open -close)) and  ((close - low)/(.001 + high - low) > 0.7) and ((open - low)/(.001 + high - low) > 0.7))

isGravestone=(close<math.min(open[1],close[1]) and ((high - low)>3*(open -close)) and  ((high - close)/(.001 + high - low) > 0.9) and ((high - open)/(.001 + high - low) > 0.9))

// Plotting
plotshape(plotCandlesticks and plotEveningStar and isEveningStar, title = "Evening Star", color = color.red, style = shape.arrowdown, text = "Evening\nStar", textcolor = color.red, size = size.normal, location = location.abovebar)

plotshape(plotCandlesticks and plotMorningStar and isMorningStar, title = "Morning Star", color = color.lime, style = shape.arrowup, text = "Morning\nStar", textcolor = color.lime, size = size.normal, location = location.belowbar)

plotshape(plotCandlesticks and plotShootingStar and isShootingStar, title= "Shooting Star", color=color.red, style=shape.arrowdown, textcolor = color.red, size = size.normal, text="Shooting\nStar")
plotshape(plotCandlesticks and plotInvertedHammer and isInvertedHammer, title= "Inverted Hammer", location=location.belowbar, color=color.lime, style=shape.arrowup, textcolor = color.lime, size = size.normal, text="IH")

plotshape(plotCandlesticks and plotHammer and isHammer, title= "Hammer", location=location.belowbar, color=color.lime, style=shape.arrowup, textcolor = color.lime, size = size.normal, text="H")

plotshape(plotCandlesticks and plotGravestone and isGravestone, title= "Gravestone", location=location.belowbar, color=color.lime, style=shape.arrowup, textcolor = color.lime, size = size.normal, text="G")
